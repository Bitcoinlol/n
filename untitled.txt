-- Services
local ContextActionService = game:GetService('ContextActionService')
local UserInputService = cloneref and cloneref(game:GetService('UserInputService')) or game:GetService('UserInputService')
local ContentProvider = cloneref and cloneref(game:GetService('ContentProvider')) or game:GetService('ContentProvider')
local TweenService = cloneref and cloneref(game:GetService('TweenService')) or game:GetService('TweenService')
local HttpService = cloneref and cloneref(game:GetService('HttpService')) or game:GetService('HttpService')
local TextService = cloneref and cloneref(game:GetService('TextService')) or game:GetService('TextService')
local RunService = cloneref and cloneref(game:GetService('RunService')) or game:GetService('RunService')
local Lighting = cloneref and cloneref(game:GetService('Lighting')) or game:GetService('Lighting')
local Players = cloneref and cloneref(game:GetService('Players')) or game:GetService('Players')
local CoreGui = cloneref and cloneref(game:GetService('CoreGui')) or game:GetService('CoreGui')
local Debris = cloneref and cloneref(game:GetService('Debris')) or game:GetService('Debris')
local VirtualInputManager = game:GetService("VirtualInputManager")
local GuiService = game:GetService('GuiService')
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local Stats = game:GetService("Stats")

local LocalPlayer = Players.LocalPlayer
local clientCharacter = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local clientHumanoid = clientCharacter:FindFirstChildOfClass("Humanoid")
local AliveGroup = Workspace:FindFirstChild("Alive")
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local Hotbar = PlayerGui:WaitForChild("Hotbar")
local ParryCD = PlayerGui.Hotbar.Block.UIGradient
local AbilityCD = PlayerGui.Hotbar.Ability.UIGradient

-- Variables
local Phantom = false
local Tornado_Time = tick()
local Last_Input = UserInputService:GetLastInputType()
local Vector2_Mouse_Location = nil
local Grab_Parry = nil
local Parry_Remote = true
local Parry_Key = nil
local Parry_Arg = nil
local Speed_Divisor_Multiplier = 1.1
local LobbyAP_Speed_Divisor_Multiplier = 1.1
local firstParryFired = false
local ParryThreshold = 2.5
local firstParryType = 'F_Key'
local Previous_Positions = {}
local Parries = 0
local Lerp_Radians = 0
local Last_Warping = tick()
local Previous_Velocity = {}
local Curving = tick()
local Runtime = Workspace.Runtime
local Connections_Manager = {}
local Selected_Parry_Type = "Camera"
local Infinity = false
local Parried = false
local Last_Parry = 0
local AutoParry = true
local Balls = Workspace:WaitForChild('Balls')
local CurrentBall = nil
local InputTask = nil
local Cooldown = 0.02
local RunTime = Workspace:FindFirstChild("Runtime")
local isMobile = UserInputService.TouchEnabled and not UserInputService.MouseEnabled
local StrafeSpeed = 36
local Training_Parried = false
local CosmeticsActive = false
local hit_Sound_Enabled = false
local headLoop = nil
local AutoManualSpamEnabled = false
local ManualSpamActive = false
local recentTargetChanges = {} -- New variable for tracking ball target changes
local FlySpeed = 50 -- New variable for fly speed
local BallMagnetStrength = 50 -- New variable for ball magnet strength
local HitboxSize = 10 -- New variable for hitbox size
local FogDistance = 1000 -- New variable for fog distance
local JumpPower = 50 -- New variable for jump power
local Brightness = 1 -- New variable for brightness

-- Remote detection
task.spawn(function()
    for _, value in pairs(getgc()) do
        if type(value) == "function" and islclosure(value) then
            local protos = debug.getprotos(value)
            local upvalues = debug.getupvalues(value)
            local constants = debug.getconstants(value)
            if #protos == 4 and #upvalues == 24 and #constants >= 102 then
                Parry_Key = debug.getupvalue(value, 17)
                Parry_Remote = debug.getupvalue(value, 18)
                Parry_Arg = debug.getconstant(value, 64)
                break
            end
        end
    end
    if not Parry_Remote then
        warn("[Parry Remote Detection] Failed to find Parry_Remote")
    else
        print("[Parry Remote Detection] Success: Remote =", Parry_Remote and Parry_Remote.Name or "nil", "Key =", Parry_Key, "Arg =", Parry_Arg)
    end
end)

-- Utility functions
local function BlockMovement(actionName, inputState, inputObject)
    return Enum.ContextActionResult.Sink
end

local function updateNavigation(guiObject)
    GuiService.SelectedObject = guiObject
end

local function performFirstPress(parryType)
    if parryType == 'F_Key' then
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.F, false, nil)
    elseif parryType == 'Left_Click' then
        VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)
    elseif parryType == 'Navigation' then
        local button = Players.LocalPlayer.PlayerGui.Hotbar.Block
        updateNavigation(button)
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
    end
end

if not LPH_OBFUSCATED then
    function LPH_JIT(Function) return Function end
    function LPH_JIT_MAX(Function) return Function end
    function LPH_NO_VIRTUALIZE(Function) return Function end
end

function create_animation(object, info, value)
    local animation = TweenService:Create(object, info, value)
    animation:Play()
    task.wait(info.Time)
    Debris:AddItem(animation, 0)
    animation:Destroy()
    animation = nil
end

-- Animation handling
local Animation = {}
Animation.storage = {}
Animation.current = nil
Animation.track = nil

for _, v in pairs(ReplicatedStorage.Misc.Emotes:GetChildren()) do
    if v:IsA("Animation") and v:GetAttribute("EmoteName") then
        local Emote_Name = v:GetAttribute("EmoteName")
        Animation.storage[Emote_Name] = v
    end
end

local Emotes_Data = {}
for Object in pairs(Animation.storage) do
    table.insert(Emotes_Data, Object)
end
table.sort(Emotes_Data)

-- Auto_Parry system
local Auto_Parry = {}

function Auto_Parry.Parry_Animation()
    local Parry_Animation = ReplicatedStorage.Shared.SwordAPI.Collection.Default:FindFirstChild('GrabParry')
    local Current_Sword = LocalPlayer.Character:GetAttribute('CurrentlyEquippedSword')
    if not Current_Sword or not Parry_Animation then return end
    local Sword_Data = ReplicatedStorage.Shared.ReplicatedInstances.Swords.GetSword:Invoke(Current_Sword)
    if not Sword_Data or not Sword_Data['AnimationType'] then return end
    for _, object in pairs(ReplicatedStorage.Shared.SwordAPI.Collection:GetChildren()) do
        if object.Name == Sword_Data['AnimationType'] then
            if object:FindFirstChild('GrabParry') or object:FindFirstChild('Grab') then
                local sword_animation_type = object:FindFirstChild('Grab') and 'Grab' or 'GrabParry'
                Parry_Animation = object[sword_animation_type]
            end
        end
    end
    Grab_Parry = LocalPlayer.Character.Humanoid.Animator:LoadAnimation(Parry_Animation)
    Grab_Parry:Play()
end

function Auto_Parry.Play_Animation(v)
    local Animations = Animation.storage[v]
    if not Animations then return false end
    local Animator = LocalPlayer.Character.Humanoid.Animator
    if Animation.track then Animation.track:Stop() end
    Animation.track = Animator:LoadAnimation(Animations)
    Animation.track:Play()
    Animation.current = v
end

function Auto_Parry.Get_Balls()
    local Balls = {}
    for _, Instance in pairs(Workspace.Balls:GetChildren()) do
        if Instance:GetAttribute('realBall') then
            Instance.CanCollide = false
            table.insert(Balls, Instance)
        end
    end
    return Balls
end

function Auto_Parry.Get_Ball()
    for _, Instance in pairs(Workspace.Balls:GetChildren()) do
        if Instance:GetAttribute('realBall') then
            Instance.CanCollide = false
            return Instance
        end
    end
end

function Auto_Parry.Lobby_Balls()
    for _, Instance in pairs(Workspace.TrainingBalls:GetChildren()) do
        if Instance:GetAttribute("realBall") then return Instance end
    end
end

local Closest_Entity = nil

function Auto_Parry.Closest_Player()
    local Max_Distance = math.huge
    local Found_Entity = nil
    for _, Entity in pairs(Workspace.Alive:GetChildren()) do
        if tostring(Entity) ~= tostring(LocalPlayer) then
            if Entity.PrimaryPart then
                local Distance = LocalPlayer:DistanceFromCharacter(Entity.PrimaryPart.Position)
                if Distance < Max_Distance then
                    Max_Distance = Distance
                    Found_Entity = Entity
                end
            end
        end
    end
    Closest_Entity = Found_Entity
    return Found_Entity
end

function Auto_Parry:Get_Entity_Properties()
    Auto_Parry.Closest_Player()
    if not Closest_Entity then return false end
    local Entity_Velocity = Closest_Entity.PrimaryPart.Velocity
    local Entity_Direction = (LocalPlayer.Character.PrimaryPart.Position - Closest_Entity.PrimaryPart.Position).Unit
    local Entity_Distance = (LocalPlayer.Character.PrimaryPart.Position - Closest_Entity.PrimaryPart.Position).Magnitude
    return {
        Velocity = Entity_Velocity,
        Direction = Entity_Direction,
        Distance = Entity_Distance
    }
end

function Auto_Parry.Parry_Data(Parry_Type)
    Auto_Parry.Closest_Player()
    local Events = {}
    local Camera = Workspace.CurrentCamera
    local Vector2_Mouse_Location
    if Last_Input == Enum.UserInputType.MouseButton1 or Last_Input == Enum.UserInputType.MouseButton2 or Last_Input == Enum.UserInputType.Keyboard then
        local Mouse_Location = UserInputService:GetMouseLocation()
        Vector2_Mouse_Location = {Mouse_Location.X, Mouse_Location.Y}
    else
        Vector2_Mouse_Location = {Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2}
    end
    if isMobile then
        Vector2_Mouse_Location = {Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2}
    end
    local Players_Screen_Positions = {}
    for _, v in pairs(Workspace.Alive:GetChildren()) do
        if v ~= LocalPlayer.Character then
            local worldPos = v.PrimaryPart.Position
            local screenPos, isOnScreen = Camera:WorldToScreenPoint(worldPos)
            if isOnScreen then
                Players_Screen_Positions[v] = Vector2.new(screenPos.X, screenPos.Y)
            end
            Events[tostring(v)] = screenPos
        end
    end
    if Parry_Type == 'Camera' then
        return {0, Camera.CFrame, Events, Vector2_Mouse_Location}
    elseif Parry_Type == 'Backwards' then
        local Backwards_Direction = Camera.CFrame.LookVector * -10000
        Backwards_Direction = Vector3.new(Backwards_Direction.X, 0, Backwards_Direction.Z)
        return {0, CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + Backwards_Direction), Events, Vector2_Mouse_Location}
    elseif Parry_Type == 'Straight' then
        local Aimed_Player = nil
        local Closest_Distance = math.huge
        local Mouse_Vector = Vector2.new(Vector2_Mouse_Location[1], Vector2_Mouse_Location[2])
        for _, v in pairs(Workspace.Alive:GetChildren()) do
            if v ~= LocalPlayer.Character then
                local worldPos = v.PrimaryPart.Position
                local screenPos, isOnScreen = Camera:WorldToScreenPoint(worldPos)
                if isOnScreen then
                    local playerScreenPos = Vector2.new(screenPos.X, screenPos.Y)
                    local distance = (Mouse_Vector - playerScreenPos).Magnitude
                    if distance < Closest_Distance then
                        Closest_Distance = distance
                        Aimed_Player = v
                    end
                end
            end
        end
        if Aimed_Player then
            return {0, CFrame.new(LocalPlayer.Character.PrimaryPart.Position, Aimed_Player.PrimaryPart.Position), Events, Vector2_Mouse_Location}
        else
            return {0, CFrame.new(LocalPlayer.Character.PrimaryPart.Position, Closest_Entity and Closest_Entity.PrimaryPart.Position or LocalPlayer.Character.PrimaryPart.Position), Events, Vector2_Mouse_Location}
        end
    elseif Parry_Type == 'Random' then
        return {0, CFrame.new(Camera.CFrame.Position, Vector3.new(math.random(-4000, 4000), math.random(-4000, 4000), math.random(-4000, 4000))), Events, Vector2_Mouse_Location}
    elseif Parry_Type == 'High' then
        local High_Direction = Camera.CFrame.UpVector * 10000
        return {0, CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + High_Direction), Events, Vector2_Mouse_Location}
    elseif Parry_Type == 'Left' then
        local Left_Direction = Camera.CFrame.RightVector * 10000
        return {0, CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position - Left_Direction), Events, Vector2_Mouse_Location}
    elseif Parry_Type == 'Right' then
        local Right_Direction = Camera.CFrame.RightVector * 10000
        return {0, CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + Right_Direction), Events, Vector2_Mouse_Location}
    elseif Parry_Type == 'RandomTarget' then
        local candidates = {}
        for _, v in pairs(Workspace.Alive:GetChildren()) do
            if v ~= LocalPlayer.Character and v.PrimaryPart then
                local screenPos, isOnScreen = Camera:WorldToScreenPoint(v.PrimaryPart.Position)
                if isOnScreen then
                    table.insert(candidates, {
                        character = v,
                        screenXY = { screenPos.X, screenPos.Y }
                    })
                end
            end
        end
        if #candidates > 0 then
            local pick = candidates[math.random(1, #candidates)]
            local lookCFrame = CFrame.new(LocalPlayer.Character.PrimaryPart.Position, pick.character.PrimaryPart.Position)
            return {0, lookCFrame, Events, pick.screenXY}
        else
            return {0, Camera.CFrame, Events, { Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2 }}
        end
    end
    return Parry_Type
end

function Auto_Parry.Parry(parryType)
    if not Parry_Remote then
        warn("[Auto_Parry.Parry] Parry_Remote is nil, cannot parry")
        return false
    end
    local Parry_Data = Auto_Parry.Parry_Data(parryType or Selected_Parry_Type)
    if not Parry_Data then
        warn("[Auto_Parry.Parry] Failed to get Parry_Data")
        return false
    end
    local Hash
    if type(Parry_Arg) == "string" and string.match(Parry_Arg, "PARRY_HASH_FAKE") then
        Hash = nil
    else
        Hash = Parry_Arg
    end
    local success, err = pcall(function()
        Parry_Remote:FireServer(Hash, Parry_Key, Parry_Data[1], Parry_Data[2], Parry_Data[3], Parry_Data[4])
    end)
    if not success then
        warn("[Auto_Parry.Parry] Failed to fire remote:", err)
        return false
    end
    if not firstParryFired then
        performFirstPress(firstParryType)
        firstParryFired = true
    end
    if Parries > 7 then return false end
    Parries = Parries + 1
    task.delay(0.55, function()
        if Parries > 0 then Parries = Parries - 1 end
    end)
    return true
end

function Auto_Parry.Linear_Interpolation(a, b, time_volume)
    return a + (b - a) * time_volume
end

function Auto_Parry.Is_Curved()
    local Ball = Auto_Parry.Get_Ball()
    if not Ball then return false end
    local Zoomies = Ball:FindFirstChild('zoomies')
    if not Zoomies then return false end
    local Velocity = Zoomies.VectorVelocity
    local Ball_Direction = Velocity.Unit
    local Direction = (LocalPlayer.Character.PrimaryPart.Position - Ball.Position).Unit
    local Dot = Direction:Dot(Ball_Direction)
    local Speed = Velocity.Magnitude
    local Speed_Threshold = math.min(Speed / 100, 40)
    local Direction_Difference = (Ball_Direction - Velocity).Unit
    local Direction_Similarity = Direction:Dot(Direction_Difference)
    local Dot_Difference = Dot - Direction_Similarity
    local Distance = (LocalPlayer.Character.PrimaryPart.Position - Ball.Position).Magnitude
    local Pings = Stats.Network.ServerStatsItem['Data Ping']:GetValue()
    local Dot_Threshold = 0.5 - (Pings / 1000)
    local Reach_Time = Distance / Speed - (Pings / 1000)
    local Ball_Distance_Threshold = 15 - math.min(Distance / 1000, 15) + Speed_Threshold
    local Clamped_Dot = math.clamp(Dot, -1, 1)
    local Radians = math.rad(math.asin(Clamped_Dot))
    Lerp_Radians = Auto_Parry.Linear_Interpolation(Lerp_Radians, Radians, 0.8)
    if Speed > 100 and Reach_Time > Pings / 10 then
        Ball_Distance_Threshold = math.max(Ball_Distance_Threshold - 15, 15)
    end
    if Distance < Ball_Distance_Threshold then return false end
    if Dot_Difference < Dot_Threshold then return true end
    if Lerp_Radians < 0.018 then Last_Warping = tick() end
    if (tick() - Last_Warping) < (Reach_Time / 1.5) then return true end
    if (tick() - Curving) < (Reach_Time / 1.5) then return true end
    return Dot < Dot_Threshold
end

function Auto_Parry:Get_Ball_Properties()
    local Ball = Auto_Parry.Get_Ball()
    local Ball_Velocity = Vector3.zero
    local Ball_Origin = Ball
    local Ball_Direction = (LocalPlayer.Character.PrimaryPart.Position - Ball_Origin.Position).Unit
    local Ball_Distance = (LocalPlayer.Character.PrimaryPart.Position - Ball.Position).Magnitude
    local Ball_Dot = Ball_Direction:Dot(Ball_Velocity.Unit)
    return {
        Velocity = Ball_Velocity,
        Direction = Ball_Direction,
        Distance = Ball_Distance,
        Dot = Ball_Dot
    }
end

function Auto_Parry.Spam_Service(self)
    local Ball = Auto_Parry.Get_Ball()
    local Entity = Auto_Parry.Closest_Player()
    if not Ball or not Entity or not Entity.PrimaryPart then return false end
    local Spam_Accuracy = 0
    local Velocity = Ball.AssemblyLinearVelocity
    local Speed = Velocity.Magnitude
    local Direction = (LocalPlayer.Character.PrimaryPart.Position - Ball.Position).Unit
    local Dot = Direction:Dot(Velocity.Unit)
    local Target_Position = Entity.PrimaryPart.Position
    local Target_Distance = LocalPlayer:DistanceFromCharacter(Target_Position)
    local Maximum_Spam_Distance = self.Ping + math.min(Speed / 6, 95)
    if self.Entity_Properties.Distance > Maximum_Spam_Distance or self.Ball_Properties.Distance > Maximum_Spam_Distance or Target_Distance > Maximum_Spam_Distance then
        return Spam_Accuracy
    end
    local Maximum_Speed = 5 - math.min(Speed / 5, 5)
    local Maximum_Dot = math.clamp(Dot, -1, 0) * Maximum_Speed
    Spam_Accuracy = Maximum_Spam_Distance - Maximum_Dot
    return Spam_Accuracy
end

local function GetBall()
    for _, Ball in ipairs(Balls:GetChildren()) do
        if Ball:FindFirstChild("ff") then return Ball end
    end
    return nil
end

local function SpamInput()
    if InputTask then return end
    InputTask = task.spawn(function()
        while AutoParry do
            Auto_Parry.Parry(Selected_Parry_Type)
            task.wait(Cooldown)
        end
        InputTask = nil
    end)
end

local function isCooldownInEffect1(uigradient)
    return uigradient.Offset.Y < 0.4
end

local function isCooldownInEffect2(uigradient)
    return uigradient.Offset.Y == 0.5
end

local function cooldownProtection()
    if isCooldownInEffect1(ParryCD) then
        ReplicatedStorage.Remotes.AbilityButtonPress:Fire()
        return true
    end
    return false
end

local function AutoAbility()
    if isCooldownInEffect2(AbilityCD) then
        if LocalPlayer.Character.Abilities["Raging Deflection"].Enabled or LocalPlayer.Character.Abilities["Rapture"].Enabled or LocalPlayer.Character.Abilities["Calming Deflection"].Enabled or LocalPlayer.Character.Abilities["Aerodynamic Slash"].Enabled or LocalPlayer.Character.Abilities["Fracture"].Enabled or LocalPlayer.Character.Abilities["Death Slash"].Enabled then
            Parried = true
            ReplicatedStorage.Remotes.AbilityButtonPress:Fire()
            task.wait(2.432)
            ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("DeathSlashShootActivation"):FireServer(true)
            return true
        end
    end
    return false
end

-- Manual Spam Functions
local function toggleManualSpam(activate)
    ManualSpamActive = activate
    local button = CoreGui:FindFirstChild("ManualSpamUI") and CoreGui.ManualSpamUI.MainFrame.ClashModeButton
    if button then
        if AutoManualSpamEnabled and not ManualSpamActive then
            button.Text = "Auto"
            button.TextColor3 = Color3.new(0, 0, 1)
        else
            button.Text = activate and "Stop" or "Clash Mode"
            button.TextColor3 = activate and Color3.new(0, 1, 0) or Color3.new(1, 0, 0)
        end
    end
    if activate then
        if not Connections_Manager['Manual Spam'] then
            Connections_Manager['Manual Spam'] = RunService.Heartbeat:Connect(function()
                Auto_Parry.Parry(Selected_Parry_Type)
            end)
        end
    else
        if Connections_Manager['Manual Spam'] then
            Connections_Manager['Manual Spam']:Disconnect()
            Connections_Manager['Manual Spam'] = nil
        end
    end
end

local function checkAutoManualSpam()
    if not AutoManualSpamEnabled then return end
    local Ball = Auto_Parry.Get_Ball()
    if not Ball then
        if ManualSpamActive then toggleManualSpam(false) end
        return
    end
    local Zoomies = Ball:FindFirstChild('zoomies')
    if not Zoomies then
        if ManualSpamActive then toggleManualSpam(false) end
        return
    end
    Auto_Parry.Closest_Player()
    local Ping = Stats.Network.ServerStatsItem['Data Ping']:GetValue()
    local Ping_Threshold = math.clamp(Ping / 10, 1, 16)
    local Ball_Target = Ball:GetAttribute('target')
    local Ball_Properties = Auto_Parry:Get_Ball_Properties()
    local Entity_Properties = Auto_Parry:Get_Entity_Properties()
    local Spam_Accuracy = Auto_Parry.Spam_Service({
        Ball_Properties = Ball_Properties,
        Entity_Properties = Entity_Properties,
        Ping = Ping_Threshold
    })
    local Target_Position = Closest_Entity and Closest_Entity.PrimaryPart.Position
    local Target_Distance = Target_Position and LocalPlayer:DistanceFromCharacter(Target_Position) or math.huge
    local Direction = (LocalPlayer.Character.PrimaryPart.Position - Ball.Position).Unit
    local Ball_Direction = Zoomies.VectorVelocity.Unit
    local Dot = Direction:Dot(Ball_Direction)
    local Distance = LocalPlayer:DistanceFromCharacter(Ball.Position)
    local Pulsed = LocalPlayer.Character:GetAttribute('Pulsed')
    local FastSpamAccuracy = Spam_Accuracy * 0.8
    if Ball_Target and not Pulsed and Target_Distance <= FastSpamAccuracy and Distance <= FastSpamAccuracy and Parries <= ParryThreshold then
        if not ManualSpamActive then toggleManualSpam(true) end
    else
        if ManualSpamActive then toggleManualSpam(false) end
    end
end

-- New function to count recent target changes
local function getRecentTargetChanges()
    local currentTime = tick()
    local count = 0
    for i = #recentTargetChanges, 1, -1 do
        if currentTime - recentTargetChanges[i] < 1 then
            count = count + 1
        else
            table.remove(recentTargetChanges, i)
        end
    end
    return count
end

-- Track ball target changes
Balls.ChildAdded:Connect(function(ball)
    ball:GetAttributeChangedSignal('target'):Connect(function()
        table.insert(recentTargetChanges, tick())
    end)
end)
Balls.ChildRemoved:Connect(function()
    recentTargetChanges = {}
end)

-- Skin Changer Setup
getgenv().config = getgenv().config or {
    enabled = false,
    model = "Flowing Katana",
    anim = "Flowing Katana",
    fx = "Flowing Katana"
}
print = function(...) end
local p = game:GetService("Players").LocalPlayer
local rs = game:GetService("ReplicatedStorage")
local swords = require(rs:WaitForChild("Shared", 9e9):WaitForChild("ReplicatedInstances", 9e9):WaitForChild("Swords", 9e9))
local ctrl, playFx, lastParry = nil, nil, 0

local function getSlash(name)
    local s = swords:GetSword(name)
    return (s and s.SlashName) or "SlashEffect"
end
getgenv().config.slash = getSlash(getgenv().config.fx)
local function setSword()
    if not getgenv().config.enabled then return end
    setupvalue(rawget(swords, "EquipSwordTo"), 2, false)
    swords:EquipSwordTo(p.Character, getgenv().config.model)
    ctrl:SetSword(getgenv().config.anim)
end

getgenv().updateSword = function()
    getgenv().config.slash = getSlash(getgenv().config.fx)
    setSword()
end

while task.wait() and not ctrl do
    for _, v in getconnections(rs.Remotes.FireSwordInfo.OnClientEvent) do
        if v.Function and islclosure(v.Function) then
            local u = getupvalues(v.Function)
            if #u == 1 and type(u[1]) == "table" then ctrl = u[1] break end
        end
    end
end

local parryConnA, parryConnB
while task.wait() and not parryConnA do
    for _, v in getconnections(rs.Remotes.ParrySuccessAll.OnClientEvent) do
        if v.Function and getinfo(v.Function).name == "parrySuccessAll" then
            parryConnA, playFx = v, v.Function
            v:Disable()
            break
        end
    end
end
while task.wait() and not parryConnB do
    for _, v in getconnections(rs.Remotes.ParrySuccessClient.Event) do
        if v.Function and getinfo(v.Function).name == "parrySuccessAll" then
            parryConnB = v
            v:Disable()
            break
        end
    end
end

rs.Remotes.ParrySuccessAll.OnClientEvent:Connect(function(...)
    setthreadidentity(2)
    local a = {...}
    if tostring(a[4]) ~= p.Name then
        lastParry = tick()
    elseif getgenv().config.enabled then
        a[1], a[3] = getgenv().config.slash, getgenv().config.fx
    end
    return playFx(unpack(a))
end)

task.spawn(function()
    while task.wait(1) do
        if getgenv().config.enabled then
            local c = p.Character or p.CharacterAdded:Wait()
            if p:GetAttribute("CurrentlyEquippedSword") ~= getgenv().config.model or not c:FindFirstChild(getgenv().config.model) then
                setSword()
            end
            for _, m in pairs(c:GetChildren()) do
                if m:IsA("Model") and m.Name ~= getgenv().config.model then m:Destroy() end
                task.wait()
            end
        end
    end
end)
print("Velocity Skin changer")

-- New UI with Allusive-UI
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/MarchHubOnTopFr/Allusive-UI/refs/heads/main/Source.lua"))()
local main = Library.new()

-- New Tabs
local blatant_tab = main:create_tab("Blatant", "rbxassetid://76499042599127")
local player_tab = main:create_tab("Player", "rbxassetid://126017907477623")
local combat_tab = main:create_tab("Combat", "rbxassetid://76499042599127")
local visuals_tab = main:create_tab("Visuals", "rbxassetid://126017907477623")
local world_tab = main:create_tab("World", "rbxassetid://76499042599127")
local movement_tab = main:create_tab("Movement", "rbxassetid://126017907477623")
local exploits_tab = main:create_tab("Exploits", "rbxassetid://76499042599127")
local utilities_tab = main:create_tab("Utilities", "rbxassetid://126017907477623")
local environment_tab = main:create_tab("Environment", "rbxassetid://76499042599127")
local cheats_tab = main:create_tab("Cheats", "rbxassetid://76499042599127")
local cosmetics_tab = main:create_tab("Cosmetics", "rbxassetid://76499042599127")
local debug_tab = main:create_tab("Debug", "rbxassetid://126017907477623")

-- Blatant Modules
local auto_parry_module = blatant_tab:create_module({
    title = "Auto Parry",
    flag = "Auto_Parry",
    description = "Automatically parries attacks",
    section = "left",
    callback = function(value)
        if value then
            Connections_Manager['Auto Parry'] = RunService.PreSimulation:Connect(function()
                local One_Ball = Auto_Parry.Get_Ball()
                local Balls = Auto_Parry.Get_Balls()
                for _, Ball in pairs(Balls) do
                    if not Ball then return end
                    local Zoomies = Ball:FindFirstChild('zoomies')
                    if not Zoomies then return end
                    Ball:GetAttributeChangedSignal('target'):Once(function()
                        Parried = false
                    end)
                    if Parried then return end
                    local Ball_Target = Ball:GetAttribute('target')
                    local One_Target = One_Ball:GetAttribute('target')
                    local Velocity = Zoomies.VectorVelocity
                    local Distance = (LocalPlayer.Character.PrimaryPart.Position - Ball.Position).Magnitude
                    local Ping = Stats.Network.ServerStatsItem['Data Ping']:GetValue() / 10
                    local Ping_Threshold = math.clamp(Ping / 10, 5, 17)
                    local Speed = Velocity.Magnitude
                    local cappedSpeedDiff = math.min(math.max(Speed - 9.5, 0), 650)
                    local speed_divisor_base = 2.4 + cappedSpeedDiff * 0.002
                    local effectiveMultiplier = Speed_Divisor_Multiplier
                    if getgenv().RandomParryAccuracyEnabled then
                        if Speed < 200 then
                            effectiveMultiplier = 0.7 + (math.random(40, 100) - 1) * (0.35 / 99)
                        else
                            effectiveMultiplier = 0.7 + (math.random(1, 100) - 1) * (0.35 / 99)
                        end
                    end
                    local speed_divisor = speed_divisor_base * effectiveMultiplier
                    local Parry_Accuracy = Ping_Threshold + math.max(Speed / speed_divisor, 9.5)
                    local Curved = Auto_Parry.Is_Curved()
                    if Phantom and LocalPlayer.Character:FindFirstChild('ParryHighlight') and getgenv().PhantomV2Detection then
                        ContextActionService:BindAction('BlockPlayerMovement', BlockMovement, false, Enum.KeyCode.W, Enum.KeyCode.A, Enum.KeyCode.S, Enum.KeyCode.D, Enum.UserInputType.Touch)
                        LocalPlayer.Character.Humanoid.WalkSpeed = 36
                        LocalPlayer.Character.Humanoid:MoveTo(Ball.Position)
                        task.spawn(function()
                            repeat
                                if LocalPlayer.Character.Humanoid.WalkSpeed ~= 36 then
                                    LocalPlayer.Character.Humanoid.WalkSpeed = 36
                                end
                                task.wait()
                            until not Phantom
                        end)
                        Ball:GetAttributeChangedSignal('target'):Once(function()
                            ContextActionService:UnbindAction('BlockPlayerMovement')
                            Phantom = false
                            LocalPlayer.Character.Humanoid:MoveTo(LocalPlayer.Character.HumanoidRootPart.Position)
                            LocalPlayer.Character.Humanoid.WalkSpeed = 10
                            task.delay(3, function()
                                LocalPlayer.Character.Humanoid.WalkSpeed = 36
                            end)
                        end)
                    end
                    if Ball_Target == tostring(LocalPlayer) and Distance <= Parry_Accuracy and Phantom then
                        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.F, false, game)
                        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.F, false, game)
                        Parried = true
                    end
                    if Ball:FindFirstChild('AeroDynamicSlashVFX') then
                        Debris:AddItem(Ball.AeroDynamicSlashVFX, 0)
                        Tornado_Time = tick()
                    end
                    if Runtime:FindFirstChild('Tornado') then
                        if (tick() - Tornado_Time) < (Runtime.Tornado:GetAttribute("TornadoTime") or 1) + 0.314159 then
                            return
                        end
                    end
                    if One_Target == tostring(LocalPlayer) and Curved then return end
                    if Ball:FindFirstChild("ComboCounter") then return end
                    local Singularity_Cape = LocalPlayer.Character.PrimaryPart:FindFirstChild('SingularityCape')
                    if Singularity_Cape then return end
                    if getgenv().InfinityDetection and Infinity then return end
                    if Ball_Target == tostring(LocalPlayer) and Distance <= Parry_Accuracy then
                        if getgenv().AutoAbility and AutoAbility() then return end
                    end
                    if Ball_Target == tostring(LocalPlayer) and Distance <= Parry_Accuracy then
                        if getgenv().CooldownProtection and cooldownProtection() then return end
                        local Parry_Time = os.clock()
                        local Time_View = Parry_Time - Last_Parry
                        if Time_View > 0.5 then Auto_Parry.Parry_Animation() end
                        if getgenv().AutoParryKeypress then
                            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.F, false, nil)
                        else
                            Auto_Parry.Parry(Selected_Parry_Type)
                        end
                        Last_Parry = Parry_Time
                        Parried = true
                    end
                    local Last_Parrys = tick()
                    repeat
                        RunService.PreSimulation:Wait()
                    until (tick() - Last_Parrys) >= 1 or not Parried
                    Parried = false
                end
            end)
        else
            if Connections_Manager['Auto Parry'] then
                Connections_Manager['Auto Parry']:Disconnect()
                Connections_Manager['Auto Parry'] = nil
            end
        end
    end
})

auto_parry_module:create_slider({
    title = "Parry Accuracy",
    flag = "Parry_Accuracy",
    maximum_value = 100,
    minimum_value = 1,
    value = 100,
    round_number = true,
    callback = function(value)
        Speed_Divisor_Multiplier = 0.7 + (value - 1) * (0.35 / 99)
    end
})

local parryTypeMap = {
    ["Camera"] = "Camera",
    ["Random"] = "Random",
    ["Backwards"] = "Backwards",
    ["Straight"] = "Straight",
    ["High"] = "High",
    ["Left"] = "Left",
    ["Right"] = "Right",
    ["Random Target"] = "RandomTarget"
}

auto_parry_module:create_dropdown({
    title = "Curve Type",
    flag = "Curve_Type",
    options = {"Camera", "Random", "Backwards", "Straight", "High", "Left", "Right", "Random Target"},
    multi_dropdown = false,
    maximum_options = 1,
    callback = function(value)
        Selected_Parry_Type = parryTypeMap[value] or value
    end
})

auto_parry_module:create_checkbox({
    title = "Random Parry Accuracy",
    flag = "Random_Parry_Accuracy",
    callback = function(value)
        getgenv().RandomParryAccuracyEnabled = value
    end
})

auto_parry_module:create_checkbox({
    title = "Infinity Detection",
    flag = "Infinity_Detection",
    callback = function(value)
        getgenv().InfinityDetection = value
    end
})

auto_parry_module:create_checkbox({
    title = "Keypress",
    flag = "Keypress",
    callback = function(value)
        getgenv().AutoParryKeypress = value
    end
})

auto_parry_module:create_checkbox({
    title = "Phantom Detection",
    flag = "Phantom_Detection",
    callback = function(value)
        getgenv().PhantomV2Detection = value
    end
})

auto_parry_module:create_slider({
    title = "Parry Cooldown",
    flag = "Parry_Cooldown",
    maximum_value = 0.1,
    minimum_value = 0.01,
    value = 0.02,
    round_number = false,
    callback = function(value)
        Cooldown = value
    end
})

auto_parry_module:create_dropdown({
    title = "Input Type",
    flag = "Input_Type",
    options = {"F_Key", "Left_Click", "Navigation"},
    multi_dropdown = false,
    maximum_options = 1,
    callback = function(value)
        firstParryType = value
    end
})

local auto_spam_parry_module = blatant_tab:create_module({
    title = "Auto Spam Parry",
    flag = "Auto_Spam_Parry",
    description = "Spams parry automatically with advanced detection",
    section = "right",
    callback = function(value)
        if value then
            Connections_Manager['Auto Spam'] = RunService.PreSimulation:Connect(function()
                local Ball = Auto_Parry.Get_Ball()
                if not Ball then return end
                local Zoomies = Ball:FindFirstChild('zoomies')
                if not Zoomies then return end
                Auto_Parry.Closest_Player()
                local Ping = Stats.Network.ServerStatsItem['Data Ping']:GetValue()
                local Ping_Threshold = math.clamp(Ping / 10, 1, 16)
                local Ball_Target = Ball:GetAttribute('target')
                local Ball_Properties = Auto_Parry:Get_Ball_Properties()
                local Entity_Properties = Auto_Parry:Get_Entity_Properties()
                local Spam_Accuracy = Auto_Parry.Spam_Service({
                    Ball_Properties = Ball_Properties,
                    Entity_Properties = Entity_Properties,
                    Ping = Ping_Threshold
                })
                local recentChanges = getRecentTargetChanges()
                local adjustedSpamAccuracy = Spam_Accuracy + (recentChanges * 5)
                local Target_Position = Closest_Entity and Closest_Entity.PrimaryPart.Position
                local Target_Distance = Target_Position and LocalPlayer:DistanceFromCharacter(Target_Position) or math.huge
                local Direction = (LocalPlayer.Character.PrimaryPart.Position - Ball.Position).Unit
                local Ball_Direction = Zoomies.VectorVelocity.Unit
                local Dot = Direction:Dot(Ball_Direction)
                local Distance = LocalPlayer:DistanceFromCharacter(Ball.Position)
                if not Ball_Target then return end
                if Target_Distance > adjustedSpamAccuracy or Distance > adjustedSpamAccuracy then return end
                local Pulsed = LocalPlayer.Character:GetAttribute('Pulsed')
                if Pulsed then return end
                if Ball_Target == tostring(LocalPlayer) and Target_Distance > 30 and Distance > 30 then return end
                local threshold = ParryThreshold
                if Distance <= adjustedSpamAccuracy and (Parries > threshold or recentChanges >= 3) then
                    if getgenv().SpamParryKeypress then
                        VirtualInputManager:SendKeyEvent(true, nil, false, game)
                    else
                        Auto_Parry.Parry(Selected_Parry_Type)
                    end
                end
            end)
        else
            if Connections_Manager['Auto Spam'] then
                Connections_Manager['Auto Spam']:Disconnect()
                Connections_Manager['Auto Spam'] = nil
            end
        end
    end
})

auto_spam_parry_module:create_dropdown({
    title = "Parry Type",
    flag = "Spam_Parry_Type",
    options = {"Legit", "Blatant"},
    multi_dropdown = false,
    maximum_options = 1,
    callback = function(value) end
})

auto_spam_parry_module:create_slider({
    title = "Parry Threshold",
    flag = "Parry_Threshold",
    maximum_value = 10,
    minimum_value = 1,
    value = 2.5,
    round_number = false,
    callback = function(value)
        ParryThreshold = value
    end
})

if not isMobile then
    auto_spam_parry_module:create_checkbox({
        title = "Animation Fix",
        flag = "Animation_Fix",
        callback = function(value)
            if value then
                Connections_Manager['Animation Fix'] = RunService.PreSimulation:Connect(function()
                    local Ball = Auto_Parry.Get_Ball()
                    if not Ball then return end
                    local Zoomies = Ball:FindFirstChild('zoomies')
                    if not Zoomies then return end
                    Auto_Parry.Closest_Player()
                    local Ping = Stats.Network.ServerStatsItem['Data Ping']:GetValue()
                    local Ping_Threshold = math.clamp(Ping / 10, 10, 16)
                    local Ball_Target = Ball:GetAttribute('target')
                    local Ball_Properties = Auto_Parry:Get_Ball_Properties()
                    local Entity_Properties = Auto_Parry:Get_Entity_Properties()
                    local Spam_Accuracy = Auto_Parry.Spam_Service({
                        Ball_Properties = Ball_Properties,
                        Entity_Properties = Entity_Properties,
                        Ping = Ping_Threshold
                    })
                    local recentChanges = getRecentTargetChanges()
                    local adjustedSpamAccuracy = Spam_Accuracy + (recentChanges * 5)
                    local Target_Position = Closest_Entity and Closest_Entity.PrimaryPart.Position
                    local Target_Distance = Target_Position and LocalPlayer:DistanceFromCharacter(Target_Position) or math.huge
                    local Direction = (LocalPlayer.Character.PrimaryPart.Position - Ball.Position).Unit
                    local Ball_Direction = Zoomies.VectorVelocity.Unit
                    local Dot = Direction:Dot(Ball_Direction)
                    local Distance = LocalPlayer:DistanceFromCharacter(Ball.Position)
                    if not Ball_Target then return end
                    if Target_Distance > adjustedSpamAccuracy or Distance > adjustedSpamAccuracy then return end
                    local Pulsed = LocalPlayer.Character:GetAttribute('Pulsed')
                    if Pulsed then return end
                    if Ball_Target == tostring(LocalPlayer) and Target_Distance > 30 and Distance > 30 then return end
                    local threshold = ParryThreshold
                    if Distance <= adjustedSpamAccuracy and (Parries > threshold or recentChanges >= 3) then
                        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.F, false, game)
                    end
                end)
            else
                if Connections_Manager['Animation Fix'] then
                    Connections_Manager['Animation Fix']:Disconnect()
                    Connections_Manager['Animation Fix'] = nil
                end
            end
        end
    })
end

local manual_spam_module = blatant_tab:create_module({
    title = "Manual Spam",
    flag = "Manual_Spam",
    description = "Manual spam parry controls",
    section = "left",
    callback = function(value) end
})

manual_spam_module:create_checkbox({
    title = "Auto Manual Spam",
    flag = "Auto_Manual_Spam",
    callback = function(value)
        AutoManualSpamEnabled = value
        if value then
            Connections_Manager['Auto Manual Spam'] = RunService.Heartbeat:Connect(checkAutoManualSpam)
            local button = CoreGui:FindFirstChild("ManualSpamUI") and CoreGui.ManualSpamUI.MainFrame.ClashModeButton
            if button and not ManualSpamActive then
                button.Text = "Auto"
                button.TextColor3 = Color3.new(0, 0, 1)
            end
        else
            if Connections_Manager['Auto Manual Spam'] then
                Connections_Manager['Auto Manual Spam']:Disconnect()
                Connections_Manager['Auto Manual Spam'] = nil
            end
            if ManualSpamActive then toggleManualSpam(false) end
            local button = CoreGui:FindFirstChild("ManualSpamUI") and CoreGui.ManualSpamUI.MainFrame.ClashModeButton
            if button then
                button.Text = "Clash Mode"
                button.TextColor3 = Color3.new(1, 0, 0)
            end
        end
    end
})

manual_spam_module:create_checkbox({
    title = "Manual Spam UI",
    flag = "Manual_Spam_UI",
    callback = function(value)
        getgenv().spamui = value
        if value then
            if not CoreGui:FindFirstChild("ManualSpamUI") then
                local gui = Instance.new("ScreenGui")
                gui.Name = "ManualSpamUI"
                gui.ResetOnSpawn = false
                gui.Parent = CoreGui

                local frame = Instance.new("Frame")
                frame.Name = "MainFrame"
                frame.Position = UDim2.new(0, 20, 0, 20)
                frame.Size = UDim2.new(0, 160, 0, 60)
                frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                frame.BackgroundTransparency = 0.3
                frame.BorderSizePixel = 0
                frame.Active = true
                frame.Draggable = true
                frame.Parent = gui

                local uiCorner = Instance.new("UICorner")
                uiCorner.CornerRadius = UDim.new(0, 12)
                uiCorner.Parent = frame

                local uiStroke = Instance.new("UIStroke")
                uiStroke.Thickness = 2
                uiStroke.Color = Color3.new(0, 0, 0)
                uiStroke.Parent = frame

                local button = Instance.new("TextButton")
                button.Name = "ClashModeButton"
                button.Text = AutoManualSpamEnabled and "Auto" or "Clash Mode"
                button.TextColor3 = AutoManualSpamEnabled and Color3.new(0, 0, 1) or Color3.new(1, 0, 0)
                button.Size = UDim2.new(0, 120, 0, 40)
                button.Position = UDim2.new(0.5, -60, 0.5, -20)
                button.BackgroundTransparency = 1
                button.BorderSizePixel = 0
                button.Font = Enum.Font.GothamSemibold
                button.TextSize = 18
                button.Parent = frame

                button.MouseButton1Click:Connect(function()
                    if not AutoManualSpamEnabled then
                        toggleManualSpam(not ManualSpamActive)
                    end
                end)
            end
        else
            if CoreGui:FindFirstChild("ManualSpamUI") then
                CoreGui:FindFirstChild("ManualSpamUI"):Destroy()
            end
            if Connections_Manager['Manual Spam'] then
                Connections_Manager['Manual Spam']:Disconnect()
                Connections_Manager['Manual Spam'] = nil
            end
            if Connections_Manager['Auto Manual Spam'] then
                Connections_Manager['Auto Manual Spam']:Disconnect()
                Connections_Manager['Auto Manual Spam'] = nil
            end
            ManualSpamActive = false
            AutoManualSpamEnabled = false
        end
    end
})

local lobby_ap_module = blatant_tab:create_module({
    title = "Lobby AP",
    flag = "Lobby_AP",
    description = "Auto parry in lobby",
    section = "right",
    callback = function(value)
        if value then
            Connections_Manager['Lobby AP'] = RunService.Heartbeat:Connect(function()
                local Ball = Auto_Parry.Lobby_Balls()
                if not Ball then return end
                local Zoomies = Ball:FindFirstChild('zoomies')
                if not Zoomies then return end
                Ball:GetAttributeChangedSignal('target'):Once(function()
                    Training_Parried = false
                end)
                if Training_Parried then return end
                local Ball_Target = Ball:GetAttribute('target')
                local Velocity = Zoomies.VectorVelocity
                local Distance = LocalPlayer:DistanceFromCharacter(Ball.Position)
                local Speed = Velocity.Magnitude
                local Ping = Stats.Network.ServerStatsItem['Data Ping']:GetValue() / 10
                local LobbyAPcappedSpeedDiff = math.min(math.max(Speed - 9.5, 0), 650)
                local LobbyAPspeed_divisor_base = 2.4 + LobbyAPcappedSpeedDiff * 0.002
                local LobbyAPeffectiveMultiplier = LobbyAP_Speed_Divisor_Multiplier
                if getgenv().LobbyAPRandomParryAccuracyEnabled then
                    LobbyAPeffectiveMultiplier = 0.7 + (math.random(1, 100) - 1) * (0.35 / 99)
                end
                local LobbyAPspeed_divisor = LobbyAPspeed_divisor_base * LobbyAPeffectiveMultiplier
                local LobbyAPParry_Accuracys = Ping + math.max(Speed / LobbyAPspeed_divisor, 9.5)
                if Ball_Target == tostring(LocalPlayer) and Distance <= LobbyAPParry_Accuracys then
                    if getgenv().LobbyAPKeypress then
                        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.F, false, game)
                    else
                        Auto_Parry.Parry(Selected_Parry_Type)
                    end
                    Training_Parried = true
                end
                local Last_Parrys = tick()
                repeat
                    RunService.Heartbeat:Wait()
                until (tick() - Last_Parrys) >= 1 or not Training_Parried
                Training_Parried = false
            end)
        else
            if Connections_Manager['Lobby AP'] then
                Connections_Manager['Lobby AP']:Disconnect()
                Connections_Manager['Lobby AP'] = nil
            end
        end
    end
})

lobby_ap_module:create_slider({
    title = "Parry Accuracy",
    flag = "Lobby_Parry_Accuracy",
    maximum_value = 100,
    minimum_value = 1,
    value = 100,
    round_number = true,
    callback = function(value)
        LobbyAP_Speed_Divisor_Multiplier = 0.7 + (value - 1) * (0.35 / 99)
    end
})

lobby_ap_module:create_checkbox({
    title = "Random Parry Accuracy",
    flag = "Lobby_Random_Parry_Accuracy",
    callback = function(value)
        getgenv().LobbyAPRandomParryAccuracyEnabled = value
    end
})

-- Player Modules
local speed_module = player_tab:create_module({
    title = "Speed",
    flag = "Speed",
    description = "Increases player speed",
    section = "left",
    callback = function(value)
        if value then
            Connections_Manager['Strafe'] = RunService.Heartbeat:Connect(function()
                local character = LocalPlayer.Character
                if character and character:FindFirstChild("Humanoid") then
                    character.Humanoid.WalkSpeed = StrafeSpeed
                end
            end)
        else
            local character = LocalPlayer.Character
            if character and character:FindFirstChild("Humanoid") then
                character.Humanoid.WalkSpeed = 36
            end
            if Connections_Manager['Strafe'] then
                Connections_Manager['Strafe']:Disconnect()
                Connections_Manager['Strafe'] = nil
            end
        end
    end
})

speed_module:create_slider({
    title = "Speed",
    flag = "Speed_Value",
    maximum_value = 200,
    minimum_value = 36,
    value = 36,
    round_number = true,
    callback = function(value)
        StrafeSpeed = value
    end
})

speed_module:create_checkbox({
    title = "Auto Sprint",
    flag = "Auto_Sprint",
    callback = function(value)
        if value then
            Connections_Manager['Auto Sprint'] = RunService.Heartbeat:Connect(function()
                VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.LeftShift, false, game)
            end)
        else
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.LeftShift, false, game)
            if Connections_Manager['Auto Sprint'] then
                Connections_Manager['Auto Sprint']:Disconnect()
                Connections_Manager['Auto Sprint'] = nil
            end
        end
    end
})

speed_module:create_slider({
    title = "Jump Power",
    flag = "Jump_Power",
    maximum_value = 100,
    minimum_value = 50,
    value = 50,
    round_number = true,
    callback = function(value)
        JumpPower = value
        local character = LocalPlayer.Character
        if character and character:FindFirstChild("Humanoid") then
            character.Humanoid.JumpPower = value
        end
    end
})

local spinbot_module = player_tab:create_module({
    title = "Spinbot",
    flag = "Spinbot",
    description = "Spins the character",
    section = "right",
    callback = function(value)
        getgenv().Spinbot = value
        if value then
            getgenv().spin = true
            getgenv().spinSpeed = getgenv().spinSpeed or 1
            local Players = game:GetService("Players")
            local RunService = game:GetService("RunService")
            local Client = Players.LocalPlayer
            local function spinCharacter()
                while getgenv().spin do
                    RunService.Heartbeat:Wait()
                    local char = Client.Character
                    local funcHRP = char and char:FindFirstChild("HumanoidRootPart")
                    if char and funcHRP then
                        funcHRP.CFrame *= CFrame.Angles(0, getgenv().spinSpeed, 0)
                    end
                end
            end
            if not getgenv().spinThread then
                getgenv().spinThread = coroutine.create(spinCharacter)
                coroutine.resume(getgenv().spinThread)
            end
        else
            getgenv().spin = false
            if getgenv().spinThread then
                getgenv().spinThread = nil
            end
        end
    end
})

spinbot_module:create_slider({
    title = "Speed",
    flag = "Spin_Speed",
    maximum_value = 100,
    minimum_value = 1,
    value = 1,
    round_number = true,
    callback = function(value)
        getgenv().spinSpeed = math.rad(value)
    end
})

local fov_module = player_tab:create_module({
    title = "Field of View",
    flag = "Field_Of_View",
    description = "Adjusts camera FOV",
    section = "left",
    callback = function(value)
        getgenv().CameraEnabled = value
        local Camera = Workspace.CurrentCamera
        if value then
            getgenv().CameraFOV = getgenv().CameraFOV or 70
            Camera.FieldOfView = getgenv().CameraFOV
            if not getgenv().FOVLoop then
                getgenv().FOVLoop = RunService.RenderStepped:Connect(function()
                    if getgenv().CameraEnabled then
                        Camera.FieldOfView = getgenv().CameraFOV
                    end
                end)
            end
        else
            Camera.FieldOfView = 70
            if getgenv().FOVLoop then
                getgenv().FOVLoop:Disconnect()
                getgenv().FOVLoop = nil
            end
        end
    end
})

fov_module:create_slider({
    title = "FOV",
    flag = "FOV_Value",
    maximum_value = 150,
    minimum_value = 50,
    value = 70,
    round_number = true,
    callback = function(value)
        getgenv().CameraFOV = value
        if getgenv().CameraEnabled then
            Workspace.CurrentCamera.FieldOfView = value
        end
    end
})

-- Combat Modules
local hitbox_expander_module = combat_tab:create_module({
    title = "Hitbox Expander",
    flag = "Hitbox_Expander",
    description = "Increases enemy hitbox size",
    section = "left",
    callback = function(value)
        if value then
            Connections_Manager['Hitbox Expander'] = RunService.Heartbeat:Connect(function()
                for _, player in pairs(Players:GetPlayers()) do
                    if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                        local hrp = player.Character.HumanoidRootPart
                        hrp.Size = Vector3.new(HitboxSize, HitboxSize, HitboxSize)
                        hrp.Transparency = 0.9
                    end
                end
            end)
        else
            if Connections_Manager['Hitbox Expander'] then
                Connections_Manager['Hitbox Expander']:Disconnect()
                Connections_Manager['Hitbox Expander'] = nil
                for _, player in pairs(Players:GetPlayers()) do
                    if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                        local hrp = player.Character.HumanoidRootPart
                        hrp.Size = Vector3.new(5, 5, 5)
                        hrp.Transparency = 0
                    end
                end
            end
        end
    end
})

hitbox_expander_module:create_slider({
    title = "Hitbox Size",
    flag = "Hitbox_Size",
    maximum_value = 20,
    minimum_value = 5,
    value = 10,
    round_number = true,
    callback = function(value)
        HitboxSize = value
    end
})

hitbox_expander_module:create_checkbox({
    title = "Auto Aim",
    flag = "Auto_Aim",
    callback = function(value)
        if value then
            Connections_Manager['Auto Aim'] = RunService.RenderStepped:Connect(function()
                local closest = Auto_Parry.Closest_Player()
                if closest and closest.PrimaryPart then
                    Workspace.CurrentCamera.CFrame = CFrame.new(Workspace.CurrentCamera.CFrame.Position, closest.PrimaryPart.Position)
                end
            end)
        else
            if Connections_Manager['Auto Aim'] then
                Connections_Manager['Auto Aim']:Disconnect()
                Connections_Manager['Auto Aim'] = nil
            end
        end
    end
})

-- Visuals Modules
local esp_module = visuals_tab:create_module({
    title = "ESP",
    flag = "ESP",
    description = "Highlights players through walls",
    section = "left",
    callback = function(value)
        if value then
            Connections_Manager['ESP'] = RunService.RenderStepped:Connect(function()
                for _, player in pairs(Players:GetPlayers()) do
                    if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                        local highlight = player.Character:FindFirstChild("ESPHighlight") or Instance.new("Highlight")
                        highlight.Name = "ESPHighlight"
                        highlight.FillColor = getgenv().ESPFillColor or Color3.new(1, 0, 0)
                        highlight.OutlineColor = getgenv().ESPOutlineColor or Color3.new(1, 1, 0)
                        highlight.Parent = player.Character
                    end
                end
            end)
        else
            if Connections_Manager['ESP'] then
                Connections_Manager['ESP']:Disconnect()
                Connections_Manager['ESP'] = nil
                for _, player in pairs(Players:GetPlayers()) do
                    if player.Character and player.Character:FindFirstChild("ESPHighlight") then
                        player.Character.ESPHighlight:Destroy()
                    end
                end
            end
        end
    end
})

esp_module:create_dropdown({
    title = "ESP Color",
    flag = "ESP_Color",
    options = {"Red", "Green", "Blue", "Yellow"},
    multi_dropdown = false,
    maximum_options = 1,
    callback = function(value)
        local colorMap = {
            Red = Color3.new(1, 0, 0),
            Green = Color3.new(0, 1, 0),
            Blue = Color3.new(0, 0, 1),
            Yellow = Color3.new(1, 1, 0)
        }
        getgenv().ESPFillColor = colorMap[value]
        getgenv().ESPOutlineColor = colorMap[value]
    end
})

esp_module:create_checkbox({
    title = "Name Tags",
    flag = "Name_Tags",
    callback = function(value)
        if value then
            Connections_Manager['Name Tags'] = RunService.RenderStepped:Connect(function()
                for _, player in pairs(Players:GetPlayers()) do
                    if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
                        local billboard = player.Character.Head:FindFirstChild("NameTag") or Instance.new("BillboardGui")
                        billboard.Name = "NameTag"
                        billboard.Adornee = player.Character.Head
                        billboard.Size = UDim2.new(0, 100, 0, 30)
                        billboard.StudsOffset = Vector3.new(0, 2, 0)
                        billboard.AlwaysOnTop = true
                        local textLabel = billboard:FindFirstChild("TextLabel") or Instance.new("TextLabel")
                        textLabel.Size = UDim2.new(1, 0, 1, 0)
                        textLabel.BackgroundTransparency = 1
                        textLabel.TextColor3 = Color3.new(1, 1, 1)
                        textLabel.Text = player.Name
                        textLabel.TextScaled = true
                        textLabel.Parent = billboard
                        billboard.Parent = player.Character.Head
                    end
                end
            end)
        else
            if Connections_Manager['Name Tags'] then
                Connections_Manager['Name Tags']:Disconnect()
                Connections_Manager['Name Tags'] = nil
                for _, player in pairs(Players:GetPlayers()) do
                    if player.Character and player.Character.Head and player.Character.Head:FindFirstChild("NameTag") then
                        player.Character.Head.NameTag:Destroy()
                    end
                end
            end
        end
    end
})

-- World Modules
local fps_booster_module = world_tab:create_module({
    title = "FPS Booster",
    flag = "FPS_Booster",
    description = "Disables visual effects to boost FPS",
    section = "left",
    callback = function(value)
        if value then
            for _, v in pairs(Workspace:GetDescendants()) do
                if v:IsA("ParticleEmitter") or v:IsA("Trail") or v:IsA("Beam") then
                    v.Enabled = false
                end
            end
            Lighting.GlobalShadows = false
        else
            for _, v in pairs(Workspace:GetDescendants()) do
                if v:IsA("ParticleEmitter") or v:IsA("Trail") or v:IsA("Beam") then
                    v.Enabled = true
                end
            end
            Lighting.GlobalShadows = true
        end
    end
})

fps_booster_module:create_dropdown({
    title = "Disable Effect",
    flag = "Disable_Effect",
    options = {"All", "Particles", "Trails", "Beams"},
    multi_dropdown = false,
    maximum_options = 1,
    callback = function(value)
        for _, v in pairs(Workspace:GetDescendants()) do
            if value == "All" then
                if v:IsA("ParticleEmitter") or v:IsA("Trail") or v:IsA("Beam") then
                    v.Enabled = false
                end
            elseif value == "Particles" and v:IsA("ParticleEmitter") then
                v.Enabled = false
            elseif value == "Trails" and v:IsA("Trail") then
                v.Enabled = false
            elseif value == "Beams" and v:IsA("Beam") then
                v.Enabled = false
            end
        end
    end
})

fps_booster_module:create_slider({
    title = "Brightness",
    flag = "Brightness",
    maximum_value = 5,
    minimum_value = 0,
    value = 1,
    round_number = false,
    callback = function(value)
        Brightness = value
        Lighting.Brightness = value
    end
})

-- Movement Modules
local fly_module = movement_tab:create_module({
    title = "Fly",
    flag = "Fly",
    description = "Enables flying",
    section = "left",
    callback = function(value)
        if value then
            local bodyVelocity = Instance.new("BodyVelocity")
            bodyVelocity.Velocity = Vector3.new(0, 0, 0)
            bodyVelocity.MaxForce = Vector3.new(40000, 40000, 40000)
            bodyVelocity.Parent = LocalPlayer.Character.HumanoidRootPart
            Connections_Manager['Fly'] = RunService.Heartbeat:Connect(function()
                local moveDirection = LocalPlayer.Character.Humanoid.MoveDirection * FlySpeed
                bodyVelocity.Velocity = Vector3.new(moveDirection.X, UserInputService:IsKeyDown(Enum.KeyCode.Space) and FlySpeed or UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) and -FlySpeed or 0, moveDirection.Z)
            end)
        else
            if Connections_Manager['Fly'] then
                Connections_Manager['Fly']:Disconnect()
                Connections_Manager['Fly'] = nil
                LocalPlayer.Character.HumanoidRootPart:FindFirstChild("BodyVelocity"):Destroy()
            end
        end
    end
})

fly_module:create_slider({
    title = "Fly Speed",
    flag = "Fly_Speed",
    maximum_value = 200,
    minimum_value = 10,
    value = 50,
    round_number = true,
    callback = function(value)
        FlySpeed = value
    end
})

fly_module:create_checkbox({
    title = "Noclip",
    flag = "Noclip",
    callback = function(value)
        if value then
            Connections_Manager['Noclip'] = RunService.Stepped:Connect(function()
                for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end)
        else
            if Connections_Manager['Noclip'] then
                Connections_Manager['Noclip']:Disconnect()
                Connections_Manager['Noclip'] = nil
                for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true
                    end
                end
            end
        end
    end
})

-- Exploits Modules
local ball_magnet_module = exploits_tab:create_module({
    title = "Ball Magnet",
    flag = "Ball_Magnet",
    description = "Attracts the ball to the player",
    section = "left",
    callback = function(value)
        if value then
            Connections_Manager['Ball Magnet'] = RunService.Heartbeat:Connect(function()
                local ball = Auto_Parry.Get_Ball()
                if ball and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    local direction = (LocalPlayer.Character.HumanoidRootPart.Position - ball.Position).Unit
                    local velocity = direction * BallMagnetStrength
                    ball.Velocity = velocity
                end
            end)
        else
            if Connections_Manager['Ball Magnet'] then
                Connections_Manager['Ball Magnet']:Disconnect()
                Connections_Manager['Ball Magnet'] = nil
            end
        end
    end
})

ball_magnet_module:create_slider({
    title = "Magnet Strength",
    flag = "Magnet_Strength",
    maximum_value = 200,
    minimum_value = 10,
    value = 50,
    round_number = true,
    callback = function(value)
        BallMagnetStrength = value
    end
})

ball_magnet_module:create_checkbox({
    title = "Instant Ball Teleport",
    flag = "Instant_Ball_Teleport",
    callback = function(value)
        if value then
            Connections_Manager['Instant Ball Teleport'] = RunService.Heartbeat:Connect(function()
                local ball = Auto_Parry.Get_Ball()
                if ball and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    ball.Position = LocalPlayer.Character.HumanoidRootPart.Position + Vector3.new(0, 5, 0)
                end
            end)
        else
            if Connections_Manager['Instant Ball Teleport'] then
                Connections_Manager['Instant Ball Teleport']:Disconnect()
                Connections_Manager['Instant Ball Teleport'] = nil
            end
        end
    end
})

-- Utilities Modules
local spectate_module = utilities_tab:create_module({
    title = "Spectate Mode",
    flag = "Spectate_Mode",
    description = "Spectates the ball or players",
    section = "left",
    callback = function(value)
        if value then
            -- Implemented in dropdown callback
        else
            Workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
            Workspace.CurrentCamera.CameraSubject = LocalPlayer.Character.Humanoid
        end
    end
})

spectate_module:create_dropdown({
    title = "Spectate Target",
    flag = "Spectate_Target",
    options = {"Ball", "Closest Player"},
    multi_dropdown = false,
    maximum_options = 1,
    callback = function(value)
        if value == "Ball" then
            local ball = Auto_Parry.Get_Ball()
            if ball then
                Workspace.CurrentCamera.CameraType = Enum.CameraType.Follow
                Workspace.CurrentCamera.CameraSubject = ball
            end
        elseif value == "Closest Player" then
            local closest = Auto_Parry.Closest_Player()
            if closest then
                Workspace.CurrentCamera.CameraType = Enum.CameraType.Follow
                Workspace.CurrentCamera.CameraSubject = closest.Humanoid
            end
        end
    end
})

spectate_module:create_button({
    title = "Teleport to Closest",
    callback = function()
        local closest = Auto_Parry.Closest_Player()
        if closest and closest.PrimaryPart and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            LocalPlayer.Character.HumanoidRootPart.CFrame = closest.PrimaryPart.CFrame
        end
    end
})

spectate_module:create_dropdown({
    title = "Teleport Destination",
    flag = "Teleport_Destination",
    options = {"Spawn", "Closest Player"},
    multi_dropdown = false,
    maximum_options = 1,
    callback = function(value)
        if value == "Spawn" then
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(0, 10, 0)) -- Adjust to actual spawn position if known
            end
        elseif value == "Closest Player" then
            local closest = Auto_Parry.Closest_Player()
            if closest and closest.PrimaryPart and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                LocalPlayer.Character.HumanoidRootPart.CFrame = closest.PrimaryPart.CFrame
            end
        end
    end
})

-- Environment Modules
local time_of_day_module = environment_tab:create_module({
    title = "Time of Day",
    flag = "Time_Of_Day",
    description = "Changes the time of day",
    section = "left",
    callback = function(value)
        if value then
            Lighting.TimeOfDay = getgenv().TimeOfDay or "14:00:00"
            Connections_Manager['Time Of Day'] = RunService.Heartbeat:Connect(function()
                Lighting.TimeOfDay = getgenv().TimeOfDay
            end)
        else
            Lighting.TimeOfDay = "14:00:00"
            if Connections_Manager['Time Of Day'] then
                Connections_Manager['Time Of Day']:Disconnect()
                Connections_Manager['Time Of Day'] = nil
            end
        end
    end
})

time_of_day_module:create_dropdown({
    title = "Time",
    flag = "Time_Value",
    options = {"Morning", "Noon", "Evening", "Night"},
    multi_dropdown = false,
    maximum_options = 1,
    callback = function(value)
        local timeMap = {
            Morning = "08:00:00",
            Noon = "12:00:00",
            Evening = "18:00:00",
            Night = "00:00:00"
        }
        getgenv().TimeOfDay = timeMap[value]
        if environment_tab:get_flag("Time_Of_Day") then
            Lighting.TimeOfDay = getgenv().TimeOfDay
        end
    end
})

local no_fog_module = environment_tab:create_module({
    title = "No Fog",
    flag = "No_Fog",
    description = "Removes fog from the game",
    section = "right",
    callback = function(value)
        if value then
            Lighting.FogEnd = FogDistance
            Connections_Manager['No Fog'] = RunService.Heartbeat:Connect(function()
                Lighting.FogEnd = FogDistance
            end)
        else
            Lighting.FogEnd = 100000
            if Connections_Manager['No Fog'] then
                Connections_Manager['No Fog']:Disconnect()
                Connections_Manager['No Fog'] = nil
            end
        end
    end
})

no_fog_module:create_slider({
    title = "Fog Distance",
    flag = "Fog_Distance",
    maximum_value = 5000,
    minimum_value = 100,
    value = 1000,
    round_number = true,
    callback = function(value)
        FogDistance = value
        if environment_tab:get_flag("No_Fog") then
            Lighting.FogEnd = value
        end
    end
})

no_fog_module:create_dropdown({
    title = "Weather Effect",
    flag = "Weather_Effect",
    options = {"Clear", "Rain", "Snow"},
    multi_dropdown = false,
    maximum_options = 1,
    callback = function(value)
        -- Simulated weather effects (Blade Ball may not support native weather)
        if value == "Clear" then
            if Connections_Manager['Weather'] then
                Connections_Manager['Weather']:Disconnect()
                Connections_Manager['Weather'] = nil
            end
        elseif value == "Rain" then
            if Connections_Manager['Weather'] then
                Connections_Manager['Weather']:Disconnect()
            end
            Connections_Manager['Weather'] = RunService.RenderStepped:Connect(function()
                local particle = Instance.new("ParticleEmitter")
                particle.Texture = "rbxassetid://241517432"
                particle.Size = NumberSequence.new(0.1)
                particle.Lifetime = NumberRange.new(1, 2)
                particle.Rate = 100
                particle.Speed = NumberRange.new(10, 20)
                particle.Parent = Workspace.CurrentCamera
                Debris:AddItem(particle, 2)
            end)
        elseif value == "Snow" then
            if Connections_Manager['Weather'] then
                Connections_Manager['Weather']:Disconnect()
            end
            Connections_Manager['Weather'] = RunService.RenderStepped:Connect(function()
                local particle = Instance.new("ParticleEmitter")
                particle.Texture = "rbxassetid://602343991"
                particle.Size = NumberSequence.new(0.2)
                particle.Lifetime = NumberRange.new(2, 3)
                particle.Rate = 50
                particle.Speed = NumberRange.new(5, 10)
                particle.Parent = Workspace.CurrentCamera
                Debris:AddItem(particle, 3)
            end)
        end
    end
})

local ambient_module = environment_tab:create_module({
    title = "Ambient Colors",
    flag = "Ambient_Colors",
    description = "Changes ambient lighting colors",
    section = "left",
    callback = function(value)
        if value then
            Lighting.Ambient = getgenv().AmbientColor or Color3.new(0.5, 0.5, 0.5)
            Connections_Manager['Ambient Colors'] = RunService.Heartbeat:Connect(function()
                Lighting.Ambient = getgenv().AmbientColor
            end)
        else
            Lighting.Ambient = Color3.new(0.5, 0.5, 0.5)
            if Connections_Manager['Ambient Colors'] then
                Connections_Manager['Ambient Colors']:Disconnect()
                Connections_Manager['Ambient Colors'] = nil
            end
        end
    end
})

ambient_module:create_slider({
    title = "Red",
    flag = "Ambient_Red",
    maximum_value = 1,
    minimum_value = 0,
    value = 0.5,
    round_number = false,
    callback = function(value)
        getgenv().AmbientColor = Color3.new(value, getgenv().AmbientColor and getgenv().AmbientColor.G or 0.5, getgenv().AmbientColor and getgenv().AmbientColor.B or 0.5)
        if environment_tab:get_flag("Ambient_Colors") then
            Lighting.Ambient = getgenv().AmbientColor
        end
    end
})

ambient_module:create_slider({
    title = "Green",
    flag = "Ambient_Green",
    maximum_value = 1,
    minimum_value = 0,
    value = 0.5,
    round_number = false,
    callback = function(value)
        getgenv().AmbientColor = Color3.new(getgenv().AmbientColor and getgenv().AmbientColor.R or 0.5, value, getgenv().AmbientColor and getgenv().AmbientColor.B or 0.5)
        if environment_tab:get_flag("Ambient_Colors") then
            Lighting.Ambient = getgenv().AmbientColor
        end
    end
})

ambient_module:create_slider({
    title = "Blue",
    flag = "Ambient_Blue",
    maximum_value = 1,
    minimum_value = 0,
    value = 0.5,
    round_number = false,
    callback = function(value)
        getgenv().AmbientColor = Color3.new(getgenv().AmbientColor and getgenv().AmbientColor.R or 0.5, getgenv().AmbientColor and getgenv().AmbientColor.G or 0.5, value)
        if environment_tab:get_flag("Ambient_Colors") then
            Lighting.Ambient = getgenv().AmbientColor
        end
    end
})

-- Cheats Modules
local god_mode_module = cheats_tab:create_module({
    title = "God Mode",
    flag = "God_Mode",
    description = "Prevents health reduction",
    section = "left",
    callback = function(value)
        if value then
            Connections_Manager['God Mode'] = LocalPlayer.Character.Humanoid.HealthChanged:Connect(function(health)
                if health < LocalPlayer.Character.Humanoid.MaxHealth then
                    LocalPlayer.Character.Humanoid.Health = LocalPlayer.Character.Humanoid.MaxHealth
                end
            end)
        else
            if Connections_Manager['God Mode'] then
                Connections_Manager['God Mode']:Disconnect()
                Connections_Manager['God Mode'] = nil
            end
        end
    end
})

god_mode_module:create_button({
    title = "Kill All Enemies",
    callback = function()
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Humanoid") then
                player.Character.Humanoid.Health = 0
            end
        end
    end
})

-- Cosmetics Modules
local korblox_legs_module = cosmetics_tab:create_module({
    title = "Korblox Legs",
    flag = "Korblox_Legs",
    description = "Applies Korblox leg cosmetic",
    section = "left",
    callback = function(value)
        local function applyKorblox(character)
            local rightLeg = character:FindFirstChild("RightLeg") or character:FindFirstChild("Right Leg")
            if not rightLeg then return end
            for _, child in pairs(rightLeg:GetChildren()) do
                if child:IsA("SpecialMesh") then child:Destroy() end
            end
            local specialMesh = Instance.new("SpecialMesh")
            specialMesh.MeshId = "rbxassetid://101851696"
            specialMesh.TextureId = "rbxassetid://115727863"
            specialMesh.Scale = Vector3.new(1, 1, 1)
            specialMesh.Parent = rightLeg
        end
        local function saveRightLegProperties(char)
            if char then
                local rightLeg = char:FindFirstChild("RightLeg") or char:FindFirstChild("Right Leg")
                if rightLeg then
                    local originalMesh = rightLeg:FindFirstChildOfClass("SpecialMesh")
                    if originalMesh then
                        _G.PlayerCosmeticsCleanup.originalMeshId = originalMesh.MeshId
                        _G.PlayerCosmeticsCleanup.originalTextureId = originalMesh.TextureId
                        _G.PlayerCosmeticsCleanup.originalScale = originalMesh.Scale
                    else
                        _G.PlayerCosmeticsCleanup.hadNoMesh = true
                    end
                    _G.PlayerCosmeticsCleanup.rightLegChildren = {}
                    for _, child in pairs(rightLeg:GetChildren()) do
                        if child:IsA("SpecialMesh") then
                            table.insert(_G.PlayerCosmeticsCleanup.rightLegChildren, {
                                ClassName = child.ClassName,
                                Properties = {
                                    MeshId = child.MeshId,
                                    TextureId = child.TextureId,
                                    Scale = child.Scale
                                }
                            })
                        end
                    end
                end
            end
        end
        local function restoreRightLeg(char)
            if char then
                local rightLeg = char:FindFirstChild("RightLeg") or char:FindFirstChild("Right Leg")
                if rightLeg and _G.PlayerCosmeticsCleanup.rightLegChildren then
                    for _, child in pairs(rightLeg:GetChildren()) do
                        if child:IsA("SpecialMesh") then child:Destroy() end
                    end
                    if _G.PlayerCosmeticsCleanup.hadNoMesh then return end
                    for _, childData in ipairs(_G.PlayerCosmeticsCleanup.rightLegChildren) do
                        if childData.ClassName == "SpecialMesh" then
                            local newMesh = Instance.new("SpecialMesh")
                            newMesh.MeshId = childData.Properties.MeshId
                            newMesh.TextureId = childData.Properties.TextureId
                            newMesh.Scale = childData.Properties.Scale
                            newMesh.Parent = rightLeg
                        end
                    end
                end
            end
        end
        if value then
            CosmeticsActive = true
            if LocalPlayer.Character then
                saveRightLegProperties(LocalPlayer.Character)
                applyKorblox(LocalPlayer.Character)
            end
            _G.PlayerCosmeticsCleanup = _G.PlayerCosmeticsCleanup or {}
            _G.PlayerCosmeticsCleanup.characterAddedConn = LocalPlayer.CharacterAdded:Connect(function(char)
                saveRightLegProperties(char)
                applyKorblox(char)
            end)
        else
            CosmeticsActive = false
            if _G.PlayerCosmeticsCleanup and _G.PlayerCosmeticsCleanup.characterAddedConn then
                _G.PlayerCosmeticsCleanup.characterAddedConn:Disconnect()
                _G.PlayerCosmeticsCleanup.characterAddedConn = nil
            end
            if LocalPlayer.Character then
                restoreRightLeg(LocalPlayer.Character)
            end
            _G.PlayerCosmeticsCleanup = {}
        end
    end
})

local skin_changer_module = cosmetics_tab:create_module({
    title = "Skin Changer",
    flag = "Skin_Changer",
    description = "Changes the sword skin",
    section = "right",
    callback = function(value)
        getgenv().config.enabled = value
        if value then
            getgenv().updateSword()
        else
            local p = game:GetService("Players").LocalPlayer
            local currentSword = p:GetAttribute("CurrentlyEquippedSword")
            if currentSword then
                getgenv().config.model = currentSword
                getgenv().config.anim = currentSword
                getgenv().config.fx = currentSword
                getgenv().config.slash = getSlash(currentSword)
                getgenv().updateSword()
            end
        end
    end
})

skin_changer_module:create_textbox({
    title = "Sword Name",
    placeholder = "Enter sword name...",
    flag = "Sword_Name",
    callback = function(text)
        getgenv().config.model = text
        getgenv().config.anim = text
        getgenv().config.fx = text
    end
})

skin_changer_module:create_button({
    title = "Load Sword",
    callback = function()
        getgenv().config.enabled = true
        getgenv().updateSword()
    end
})

skin_changer_module:create_button({
    title = "Refresh Sword",
    callback = function()
        getgenv().config.enabled = false
        local p = game:GetService("Players").LocalPlayer
        local currentSword = p:GetAttribute("CurrentlyEquippedSword")
        if currentSword then
            getgenv().config.model = currentSword
            getgenv().config.anim = currentSword
            getgenv().config.fx = currentSword
            getgenv().config.slash = getSlash(currentSword)
            getgenv().updateSword()
        end
    end
})

-- Debug Modules
local ping_display_module = debug_tab:create_module({
    title = "Ping Display",
    flag = "Ping_Display",
    description = "Shows current ping",
    section = "left",
    callback = function(value)
        if value then
            if not CoreGui:FindFirstChild("PingDisplayUI") then
                local gui = Instance.new("ScreenGui")
                gui.Name = "PingDisplayUI"
                gui.ResetOnSpawn = false
                gui.Parent = CoreGui

                local frame = Instance.new("Frame")
                frame.Size = UDim2.new(0, 100, 0, 30)
                frame.Position = UDim2.new(0, 10, 0, 10)
                frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                frame.BackgroundTransparency = 0.5
                frame.Parent = gui

                local textLabel = Instance.new("TextLabel")
                textLabel.Size = UDim2.new(1, 0, 1, 0)
                textLabel.BackgroundTransparency = 1
                textLabel.TextColor3 = Color3.new(1, 1, 1)
                textLabel.Text = "Ping: 0ms"
                textLabel.TextScaled = true
                textLabel.Parent = frame

                Connections_Manager['Ping Display'] = RunService.Heartbeat:Connect(function()
                    local ping = Stats.Network.ServerStatsItem['Data Ping']:GetValue()
                    textLabel.Text = string.format("Ping: %dms", ping)
                end)
            end
        else
            if CoreGui:FindFirstChild("PingDisplayUI") then
                CoreGui.PingDisplayUI:Destroy()
            end
            if Connections_Manager['Ping Display'] then
                Connections_Manager['Ping Display']:Disconnect()
                Connections_Manager['Ping Display'] = nil
            end
        end
    end
})

ping_display_module:create_button({
    title = "Print Ball Properties",
    callback = function()
        local ball = Auto_Parry.Get_Ball()
        if ball then
            print("Ball Position:", ball.Position)
            print("Ball Velocity:", ball.Velocity)
            print("Ball Target:", ball:GetAttribute("target") or "None")
        else
            print("No ball found")
        end
    end
})

ping_display_module:create_checkbox({
    title = "FPS Counter",
    flag = "FPS_Counter",
    callback = function(value)
        if value then
            if not CoreGui:FindFirstChild("FPSCounterUI") then
                local gui = Instance.new("ScreenGui")
                gui.Name = "FPSCounterUI"
                gui.ResetOnSpawn = false
                gui.Parent = CoreGui

                local frame = Instance.new("Frame")
                frame.Size = UDim2.new(0, 100, 0, 30)
                frame.Position = UDim2.new(0, 10, 0, 50)
                frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                frame.BackgroundTransparency = 0.5
                frame.Parent = gui

                local textLabel = Instance.new("TextLabel")
                textLabel.Size = UDim2.new(1, 0, 1, 0)
                textLabel.BackgroundTransparency = 1
                textLabel.TextColor3 = Color3.new(1, 1, 1)
                textLabel.Text = "FPS: 0"
                textLabel.TextScaled = true
                textLabel.Parent = frame

                Connections_Manager['FPS Counter'] = RunService.Heartbeat:Connect(function()
                    local fps = 1 / RunService.Heartbeat:Wait()
                    textLabel.Text = string.format("FPS: %d", math.floor(fps))
                end)
            end
        else
            if CoreGui:FindFirstChild("FPSCounterUI") then
                CoreGui.FPSCounterUI:Destroy()
            end
            if Connections_Manager['FPS Counter'] then
                Connections_Manager['FPS Counter']:Disconnect()
                Connections_Manager['FPS Counter'] = nil
            end
        end
    end
})

-- Initialize UI
main:initialize()